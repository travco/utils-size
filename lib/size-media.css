/**
 * @define utilities
 * Size: generated breakpoints
 */
@each $any, $b in --mediaBreakpoints {
  @media (-$(any)viewport) {

    /* Proportional widths: breakpoint 1 (small)
       ======================================================================== */

    /**
     * Specify the proportional width of an object.
     * Intentional redundancy build into each set of unit classes.
     * Supports: 2, 3, 4, 5, 6, 8, 10, 12 part
     *
     * 1. Use `flex-basis: auto` with a width to avoid box-sizing bug in IE10/11
     *    http://git.io/vllMD
     */

    @for $j from 2 to --maxDivisions {
      @for $i from 1 to $j {
        .u$(any)size$(i)of$(j) {
          flex-basis: auto !important;
          width: calc(100% * $(i) / $(j)) !important;
        }
      }
    }

    /* Intrinsic widths
       ======================================================================== */

    /**
     * Make an element shrink wrap its content.
     */

    .u$(any)sizeFit {
      flex-basis: auto !important;
    }

    /**
     * Make an element fill the remaining space.
     *
     * 1. Be explicit to work around IE10 bug with shorthand flex
     *    http://git.io/vllC7
     * 2. IE10 ignores previous `flex-basis` value. Setting again here fixes
     *    http://git.io/vllMt
     */

    .u$(any)sizeFill {
      flex: 1 1 0% !important; /* 1 */
      flex-basis: 0% !important; /* 2 */
    }

    /**
     * An alternative method to make an element fill the remaining space.
     * Distributes space based on the initial width and height of the element
     *
     * http://www.w3.org/TR/css-flexbox/images/rel-vs-abs-flex.svg
     */

    .u$(any)sizeFillAlt {
      flex: 1 1 auto !important;
      flex-basis: auto !important;
    }

    /**
     * Make an element the width of its parent.
     */

    .u$(any)sizeFull {
      width: 100% !important;
    }

  }
}